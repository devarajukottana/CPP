#include<bits/stdc++.h>
using namespace std;
class Solution
{
    private:
    void dfs(int node,vector<int>adj[],vector<int> &vis,vector<int> &ls)
    {
        vis[node]=1;
        ls.push_back(node);
        //traverse all its neighbours
        for(int i: adj[node])
        {
            if(!vis[i])
            {
                dfs(i,adj,vis,ls);
            }
        }
    }
    public:
    vector<int> depth_first_search(int V, vector<int> adj[])
    {
        vector<int> vis(V,0);
        int start=0;
        vector<int>ls;
        dfs(start,adj,vis,ls);
        return ls;
    }
};
int main()
{
    int n,m;
    cout<<"enter the size of nodes and edges";
    cin>>n>>m;
    vector<int> adj[n];
    cout<<"enter the edges";
    for(int i=0;i<m;i++)
    {
        int u,v;
        
        cin>>u>>v;
        adj[u].push_back(v);
        adj[v].push_back(u);
    }
    
    Solution s;
    vector<int> result;
    result=s.depth_first_search(n,adj);
    cout<<" the depth first search ";
    for(int i : result)
    {
        cout<<i<<" ";
    }
    cout<<endl; 
}