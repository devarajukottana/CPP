//Use a mutex to protect shared data.
//Use futures/async to manage tasks and retrieve results safely.

#include <iostream>
#include <thread>
#include <mutex>
#include <future>
using namespace std;

mutex mtx; // Mutex to protect shared data
int sharedResource = 0;

void increment(int value) {
    lock_guard<std::mutex> lock(mtx); // Protect access
    sharedResource += value;
}

int computeResult() {
    return sharedResource * 2;
}

int main() {
    thread t1(increment, 5);
    thread t2(increment, 10);

    t1.join();
    t2.join();

    // Use a future to retrieve a  result it works in a asynchronous way , means run separatley not with threads.
    future<int> result = async(launch::async, computeResult);

    std::cout << "Computed Result: " << result.get() << std::endl;//wait till the result is came.
    return 0;
}
