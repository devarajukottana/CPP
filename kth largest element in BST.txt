//kth largest element in the BST
#include <bits/stdc++.h>
using namespace std;
struct TreeNode
{
    int data;
    TreeNode* left;
    TreeNode* right;
    TreeNode(int x)
    {
        data=x;
        left=nullptr;
        right=nullptr;
    }
};
class Solution
{
    
    public:
    int kthsmallest(TreeNode* root,int k)
    {
    int count=0;
    int result=-1;
    inorder(root,k,count,result);
    return result;
    }
    private:
    void inorder(TreeNode* root,int k,int &count,int &result)
    {
        if(root==nullptr)
        {
            return ;
        }
        inorder(root->right,k,count,result);
        count++;
        if(count==k)
        {
            result=root->data;
            return;
        }
        inorder(root->left,k,count,result);
    }
    
};
int main()
{
TreeNode* root=new TreeNode(7);
root->left =new TreeNode(5);
root->right=new TreeNode(8);
root->left->left=new TreeNode(2);
Solution s;
int k=1;
cout<<"the smallest kth element is "<<s.kthsmallest(root,k)<<endl;
}