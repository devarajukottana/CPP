//the difference between directed graph and undirected graph is only one we have to write is adj[u].push_back(v);
#include <iostream>
#include <vector>
#include <queue>
using namespace std;

class Solution {
public:
    // Function to return Breadth First Traversal of a given graph.
    vector<int> bfsOfGraph(int V, vector<int> adj[]) {
        vector<int> vis(V, 0);  // Array to keep track of visited nodes
        vector<int>bfs;
        vis[0]=1;
        queue<int>q;
        q.push(0);
        while(!q.empty())
        {
            int node=q.front();
            q.pop();
            bfs.push_back(node);
            for(int i : adj[node])
            {
                if(!vis[i])
                {
                    vis[i]=1;
                    q.push(i);
                }
            }
        }

        return bfs;  // Return the BFS traversal order
    }
};

int main() {
    int V, E;  // Number of vertices and edges
    cout << "Enter the number of vertices and edges: ";
    cin >> V >> E;

    // Create an adjacency list for the graph
    vector<int> adj[V];
    cout << "Enter the edges (u v):" << endl;
    for (int i = 0; i < E; i++) {
        int u, v;
        cin >> u >> v;
        adj[u].push_back(v);  // Add v to u's list
        adj[v].push_back(u);  // Add u to v's list (for an undirected graph)
    }

    Solution obj;
    vector<int> result = obj.bfsOfGraph(V, adj);

    // Output the BFS traversal order
    cout << "BFS Traversal: ";
    for (int node : result) {
        cout << node << " ";
    }
    cout << endl;

    return 0;
}
